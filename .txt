react 개발환경 가져오기
 1.Node.js 설치 (패키지 관리도구 npm이 같이 설치됨)
   node.js를 설치시 npm이 자동으로 같이 설치됨
  -특정 패키지 설치 : npm i 패키지명
   
 2. yarn 설치 (선택사항) -패키지 관리도구 / npm 보다 효율적이고 빠름
  npm i --global yarn 
  yarn --version(버전확인)

  yarn add 패키지명
  yarn add tailwindcss @tailwindcss/vite


 3.extension 설치
 
 4.react 프로그램 생성
  npx create-react-app 앱이름 (전통적인 방법)
  
  vite 환경에서 react 프로그램 생성
  yarn create vite
     yarn create vite 앱이름 --template react

 5.프로젝트 구조 
  package.json : Node 기반 프로젝트는 가지고 있음 == pom.xml
  eslint.config.js : 자바스크립트 문법 검사(eslint)도구의 환경설정 파일
  vite.config.js : vite 환경설정파일

명령어 
  yarn dev : 작성하는 코드 실시간 반영확인하며 페이지 개발
    press r + enter to restart the server(서버재시작)
    press u + enter to show server url()
    press o + enter to open in browser(브라우저오픈)   
    press c + enter to clear console(콘솔 클리어)
    press q + enter to quit(나가기)

 yarn build : 개발된 코드들을 하나로 합쳐서 서비스할 수 있는 상태로 만들어줌 
  dist 폴더 생성됨 
  src 폴더 안 jsx 파일들을 번들러(묶어주는 개념)를 이용해 최적화 작업을 하게됨
 
 yarn preview : 미리보기(서버에 배포된 후 실행결과 보기)

=============================================================================================
jsx 문법
 컴포넌트는 대문자로 생성
  - 자바스크립트 확장 문법 
  - 브라우저에서 실행되기 전에 코드가 번들링되는 과정에서 바벨(자바스크립트 문법으로 변환)을 사용하여 일반 자바스크립트 코드로 변환됨

 -{} 사용
  -- 하나의 태그로 만들어서 보낸다
  -- if 문대신의 조건부 연산자 : ? : 
  -- && 를 사용한 조건부 렌더링(참인 경우에만 동작)
  -- ?? or || : null or undefined 인 경우 뒤에 오는 값 반환
        {name ?? <em>No Name</em>}
  
  --?? : 비어있는 문자열은 처리 하지않음
    || : 비어있는 문자열까지 처리가능

 -style 
  1) ~~.css : import 사용
  2) JSX 안에서 스타일 선언
  3) inline 방식 : <div style={style}>홍길동</div>
  4) CSS Module : 컴포넌트마다 스타일 클래스명이 중첩되는걸 방지
=========================================

props : properties의 줄임말
        컴포넌트끼리 데이터를 전달할시 사용
        부모 => 자식
        <App name="홍길동"/>
        <App name="홍길동"/>내용</App>
    children : 컴포넌트 태그사이의 내용 보여주기
              외부의 레이아웃 컴포넌트를 구성한 뒤 내용을
              자유롭게 채울 때 사용
================================================================
state





































































